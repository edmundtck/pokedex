{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","this","props","id","name","type","exp","paddedId","toString","padStart","imgLink","className","src","alt","Component","Pokedex","pokemon","isWinner","cardList","map","card","key","base_experience","winColor","defaultProps","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a58bac0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Pokecard.css';\n\nconst POKE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\nconst POKE_API_V2 = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\n\n\nclass Pokecard extends Component {\n    render() {\n        const {id, name, type, exp} = this.props;\n        const paddedId = id.toString().padStart(3, '0');\n        // const imgLink = `${POKE_API}${id}.png`;\n        const imgLink = `${POKE_API_V2}${paddedId}.png`;\n\n        \n        return (\n            <div className=\"Pokecard\">\n                <h2 className=\"Pokecard-heading\">{name}</h2>\n                <figure className=\"Pokecard-image\">\n                    <img src={imgLink} alt={name}/>\n                </figure>\n                <div className=\"Pokecard-details\">\n                    <p>Type: {type}</p>\n                    <p>EXP: {exp}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Pokecard;","import React, { Component } from 'react';\nimport Pokecard from './Pokecard';\nimport './Pokedex.css';\n\nclass Pokedex extends Component {\n    static defaultProps = {\n        pokemon: [\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n          ]\n    }\n    \n    render() {\n        const { pokemon, exp, isWinner } = this.props;\n        const cardList = pokemon.map(card => <Pokecard key={card.id} id={card.id} name={card.name} type={card.type} exp={card.base_experience} /> )\n        const winColor = isWinner ? 'Pokedex-winlose--win' : 'Pokedex-winlose--lose';\n        return (\n\n            <div className=\"Pokedex\">\n                <div className=\"Pokedex-details\">\n                    <h2 className={`Pokedex-winlose ${winColor}`}>{isWinner ? 'Winner!' : 'Loser!'}</h2>\n                    <h4>Total Experience: {exp}</h4>\n                </div>\n                <div className=\"Pokedex-cards\">\n                    {cardList}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Pokedex;","import React, { Component } from 'react';\nimport Pokedex from './Pokedex';\n\nclass Pokegame extends Component {\n    static defaultProps = {\n        pokemon: [\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n          ]\n    }\n\n    render() {\n        let hand1 = [], \n            hand2 = [...this.props.pokemon];\n\n        while(hand1.length < hand2.length) {\n            let randIdx = Math.floor(Math.random() * hand2.length);\n            let randPokemon = hand2.splice(randIdx, 1)[0];\n            hand1.push(randPokemon);\n        }\n\n        let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n        let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n\n        return (\n            <div>\n                <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2}/>\n                <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1}/>\n            </div>\n        )\n    }\n}\n\nexport default Pokegame;","import React from 'react';\nimport Pokecard from './Pokecard';\nimport Pokedex from './Pokedex';\nimport Pokegame from './Pokegame';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}